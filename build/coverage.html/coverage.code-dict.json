{"/home/travis/build/npmtest/node-npmtest-hpm-cli/test.js":"/* istanbul instrument in package npmtest_hpm_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hpm-cli/lib.npmtest_hpm_cli.js":"/* istanbul instrument in package npmtest_hpm_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hpm_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hpm_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hpm-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hpm-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hpm_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hpm_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hpm_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hpm_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hpm_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hpm_cli.__dirname + '/lib.npmtest_hpm_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hpm-cli/node_modules/hpm-cli/index.js":"#!/usr/bin/env node\n'use strict'\nconst fs = require('fs')\nconst os = require('os')\n\nconst args = require('args')\nconst chalk = require('chalk')\nconst columnify = require('columnify')\nconst execa = require('execa')\nconst fileExists = require('file-exists')\nconst got = require('got')\nconst pify = require('pify')\nconst opn = require('opn')\nconst ora = require('ora')\nconst updateNotifier = require('update-notifier')\n\nconst api = require('./api')\nconst pkg = require('./package')\n\nupdateNotifier({pkg}).notify()\n\nif (!api.exists()) {\n  let msg = chalk.red('You don\\'t have Hyper.app installed! :(\\n')\n  msg += `${chalk.red('You are missing')} ${chalk.green('awesomeness')}`\n  msg += chalk.red(`.\\n`)\n  msg += chalk.green('Check it out: https://hyper.is/')\n  console.error(msg)\n  process.exit(1)\n}\n\nargs.command(['i', 'install'], 'Install a plugin', (name, args) => {\n  const plugin = args[0]\n  return api.install(plugin)\n\t\t.then(() => console.log(chalk.green(`${plugin} installed successfully!`)))\n\t\t.catch(err => console.error(chalk.red(err)))\n})\n\nargs.command(['u', 'uni', 'uninstall', 'rm', 'remove'], 'Uninstall a plugin', (name, args) => {\n  const plugin = args[0]\n  return api.uninstall(plugin)\n\t\t.then(() => console.log(chalk.green(`${plugin} uninstalled successfully!`)))\n\t\t.catch(err => console.log(chalk.red(err)))\n})\n\nargs.command(['ls', 'list'], 'List installed plugins', () => {\n  const plugins = api.list()\n\n  if (plugins) {\n    console.log(plugins)\n  } else {\n    console.log(chalk.red(`No plugins installed yet.`))\n  }\n  process.exit(1)\n})\n\nconst lsRemote = () => { // note that no errors are catched by this function\n  const URL = 'http://registry.npmjs.org/-/_view/byKeyword?startkey=[%22hyperterm%22,%22hyper%22]&endkey=[%22hyperterm%22,{}]&group_level=4'\n  return got(URL)\n\t\t.then(response => JSON.parse(response.body).rows)\n\t\t.then(entries => entries.map(entry => entry.key))\n\t\t.then(entries => entries.map(entry => {\n  return {name: entry[1], description: entry[2]}\n}))\n\t\t.then(entries => entries.map(entry => {\n  entry.name = chalk.green(entry.name)\n  return entry\n}))\n}\n\nargs.command(['s', 'search'], 'Search for plugins on npm', (name, args) => {\n  const spinner = ora('Searching').start()\n  const query = args[0] ? args[0].toLowerCase() : ''\n\n  return lsRemote()\n\t\t.then(entries => {\n  return entries.filter(entry => {\n    return entry.name.indexOf(query) !== -1 ||\n\t\t\t\t\t((entry.description) ? entry.description.toLowerCase().indexOf(query) : -1) !== -1\n  })\n})\n\t\t.then(entries => {\n  if (entries.length === 0) {\n    spinner.fail()\n    console.error(chalk.red(`Your search '${query}' did not match any plugins`))\n    console.error(`${chalk.red('Try')} ${chalk.green('hpm ls-remote')}`)\n    process.exit(1)\n  } else {\n    let msg = columnify(entries)\n    spinner.succeed()\n    msg = msg.substring(msg.indexOf('\\n') + 1) // remove header\n    console.log(msg)\n  }\n}).catch(err => {\n  spinner.fail()\n  console.error(chalk.red(err)) // TODO\n})\n})\n\nargs.command(['lsr', 'list-remote', 'ls-remote'], 'List plugins available on npm', () => {\n  const spinner = ora('Searching').start()\n\n  return lsRemote()\n\t\t.then(entries => {\n  let msg = columnify(entries)\n\n  spinner.succeed()\n  msg = msg.substring(msg.indexOf('\\n') + 1) // remove header\n  console.log(msg)\n}).catch(err => {\n  spinner.fail()\n  console.error(chalk.red(err)) // TODO\n})\n})\n\nargs.command(['d', 'docs', 'h', 'home'], 'Open the npm page of a plugin', (name, args) => {\n  return opn(`http://ghub.io/${args[0]}`, {wait: false})\n})\n\nargs.command(['f', 'fork'], 'Fork a plugin from npm into your ~/.hyper_plugins/local', (name, args) => {\n  const spinner = ora('Installing').start()\n  const plugin = args[0]\n  return api.existsOnNpm(plugin).then(() => {\n    if (api.isInstalled(plugin, true)) {\n      spinner.fail()\n      console.error(chalk.red(`${plugin} is already installed locally`))\n      process.exit(1)\n    }\n\n    const folderName = `${os.homedir()}/.hyper_plugins/local`\n    const fileName = `${folderName}/package.json`\n    if (!fileExists(fileName)) {\n      fs.writeFileSync(fileName, '{\"name\": \"hpm-placeholder\"}', 'utf-8')\n    }\n\n    execa('npm', ['i', plugin], {cwd: folderName})\n\t\t\t.then(() => pify(fs.rename)(`${folderName}/node_modules/${plugin}`, `${folderName}/${plugin}`))\n\t\t\t.then(() => api.uninstall(plugin))\n\t\t\t.then(() => api.install(plugin, true))\n\t\t\t.then(() => {\n  spinner.succeed()\n  console.log(chalk.green(`${plugin} installed locally successfully!`))\n  console.log(chalk.green(`Check ${folderName}/${plugin}`))\n})\n\t\t\t.catch(err => {\n  spinner.fail()\n  console.error(chalk.red(err)) // TODO\n})\n  }).catch(err => {\n    spinner.fail()\n    if (err.code === 'NOT_FOUND_ON_NPM') {\n      console.error(chalk.red(err.message))\n    } else {\n      console.error(chalk.red(err))\n    }\n    process.exit(1)\n  })\n})\n\nargs.parse(process.argv, {name: 'hpm'})\n\n// Show help when no command is invoked\nif (args.raw._.length === 0 || !args.isDefined(args.raw._[0], 'commands')) {\n  args.showHelp()\n}\n","/home/travis/build/npmtest/node-npmtest-hpm-cli/node_modules/hpm-cli/api.js":"'use strict'\nconst fs = require('fs')\nconst os = require('os')\n\nconst chalk = require('chalk')\nconst npmName = require('npm-name')\nconst pify = require('pify')\nconst recast = require('recast')\n\nconst fileName = `${os.homedir()}/.hyper.js`\nconst oldConf = `${os.homedir()}/.hyperterm.js`\n\nfunction getPluginName(item) {\n  if (item.type === 'TemplateLiteral') {\n    return item.quasis[0].value.raw\n  }\n  return item.value\n}\n\nlet fileContents\nlet parsedFile\nlet plugins\nlet localPlugins\n\ntry {\n  fileContents = fs.readFileSync(fileName, 'utf8')\n\n  parsedFile = recast.parse(fileContents)\n\n  const expression = parsedFile.program.body[0].expression\n  const properties = (expression && expression.right && expression.right.properties) || []\n  plugins = properties.find(property => {\n    return property.key.name === 'plugins'\n  }).value.elements\n\n  localPlugins = properties.find(property => {\n    return property.key.name === 'localPlugins'\n  }).value.elements\n} catch (err) {\n  if (err.code !== 'ENOENT') { // ENOENT === !exists()\n    throw err\n  }\n}\n\nfunction exists() {\n  if (fs.existsSync(oldConf)) {\n    console.log(chalk.yellow(`Warning: ${oldConf} should be ${fileName}`))\n  }\n  return fileContents !== undefined\n}\n\nfunction isInstalled(plugin, locally) {\n  const array = locally ? localPlugins : plugins\n  if (array && Array.isArray(array)) {\n    return array.find(entry => getPluginName(entry) === plugin) !== undefined\n  }\n  return false\n}\n\nfunction save() {\n  return pify(fs.writeFile)(fileName, recast.print(parsedFile).code, 'utf8')\n}\n\nfunction existsOnNpm(plugin) {\n  plugin = plugin.split('#')[0]\n  return npmName(plugin).then(available => {\n    if (available) {\n      const err = new Error(`${plugin} not found on npm`)\n      err.code = 'NOT_FOUND_ON_NPM'\n      throw err\n    }\n  })\n}\n\nfunction install(plugin, locally) {\n  const array = locally ? localPlugins : plugins\n  return new Promise((resolve, reject) => {\n    existsOnNpm(plugin).then(() => {\n      if (isInstalled(plugin, locally)) {\n        return reject(`${plugin} is already installed`)\n      }\n\n      array.push(recast.types.builders.literal(plugin))\n      save().then(resolve).catch(err => reject(err))\n    }).catch(err => {\n      if (err.code === 'NOT_FOUND_ON_NPM') {\n        reject(err.message)\n      } else {\n        reject(err)\n      }\n    })\n  })\n}\n\nfunction uninstall(plugin) {\n  return new Promise((resolve, reject) => {\n    if (!isInstalled(plugin)) {\n      return reject(`${plugin} is not installed`)\n    }\n\n    const index = plugins.findIndex(entry => getPluginName(entry) === plugin)\n    plugins.splice(index, 1)\n    save().then(resolve).catch(err => reject(err))\n  })\n}\n\nfunction list() {\n  if (Array.isArray(plugins)) {\n    return plugins.map(plugin => getPluginName(plugin)).join('\\n')\n  }\n  return false\n}\n\nmodule.exports.exists = exists\nmodule.exports.existsOnNpm = existsOnNpm\nmodule.exports.isInstalled = isInstalled\nmodule.exports.install = install\nmodule.exports.uninstall = uninstall\nmodule.exports.list = list\n"}